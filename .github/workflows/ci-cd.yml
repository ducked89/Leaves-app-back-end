name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - feature/*
  pull_request:
    branches:
      - main

jobs:
  build:
    name: Build Application
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'yarn'

      - name: Install Dependencies
        run: yarn install --frozen-lockfile

      - name: Build Application
        run: yarn build

  lint:
    name: Lint Code (ESLint & Prettier)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'yarn'

      - name: Install Dependencies
        run: yarn install --frozen-lockfile

      - name: Run ESLint
        run: yarn lint

      - name: Run Prettier Check
        run: yarn prettier:check

  test:
    name: Run Unit & E2E Tests
    runs-on: ubuntu-latest
    services:
      mongodb:
        image: mongo:6
        ports:
          - 27017:27017
    env:
      MONGO_URI: mongodb://localhost:27017/testdb
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'yarn'

      - name: Install Dependencies
        run: yarn install --frozen-lockfile

      - name: Run Unit Tests
        run: yarn test:cov
#      - name: Run E2E Tests
#        run: yarn test:e2e

  sonarqube:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    needs: [build, lint, test]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'yarn'

      - name: Install Dependencies
        run: yarn install --frozen-lockfile

      - name: Run SonarQube Scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }}
        run: |
          yarn global add sonarqube-scanner
          sonar-scanner \
            -Dsonar.organization=default \
            -Dsonar.projectKey=$SONAR_PROJECT_KEY \
            -Dsonar.language=TypeScript \
            -Dsonar.sources=src \
            -Dsonar.host.url=$SONAR_HOST_URL \
            -Dsonar.token=$SONAR_TOKEN

  deploy-test:
    name: Deploy to Kubernetes (Test Environment)
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: [build, lint, test, sonarqube]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Kubernetes CLI (kubectl)
        uses: azure/setup-kubectl@v3
        with:
          version: latest

      - name: Authenticate with Kubernetes Cluster
        env:
          KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
        run: |
          echo "$KUBE_CONFIG" | base64 --decode > $HOME/.kube/config

      - name: Build and Push Docker Image
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
          IMAGE_NAME: my-nestjs-app
        run: |
          echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
          docker build -t $DOCKER_USERNAME/$IMAGE_NAME:latest .
          docker push $DOCKER_USERNAME/$IMAGE_NAME:latest

      - name: Apply Kubernetes Deployment
        run: |
          kubectl apply -f k8s/deployment.yaml
          kubectl apply -f k8s/service.yaml

      - name: Verify Deployment
        run: kubectl rollout status deployment my-nestjs-app
